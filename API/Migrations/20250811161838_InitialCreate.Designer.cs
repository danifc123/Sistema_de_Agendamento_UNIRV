// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeuProjeto.Data;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811161838_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeuProjeto.Models.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataCancelamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataConfirmacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly>("Horario")
                        .HasColumnType("time without time zone");

                    b.Property<int>("PsicologoId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("PsicologoId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("SeuProjeto.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Semestre")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Matricula")
                        .IsUnique();

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("SeuProjeto.Models.Anotacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgendamentoId")
                        .HasColumnType("integer");

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PsicologoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgendamentoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("PsicologoId");

                    b.ToTable("Anotacoes");
                });

            modelBuilder.Entity("SeuProjeto.Models.Disponibilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("HoraFim")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time without time zone");

                    b.Property<int>("PsicologoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PsicologoId");

                    b.ToTable("Disponibilidades");
                });

            modelBuilder.Entity("SeuProjeto.Models.FormularioSolicitacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DataEnvio")
                        .HasColumnType("date");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.ToTable("FormulariosSolicitacao");
                });

            modelBuilder.Entity("SeuProjeto.Models.Psicologo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Crp")
                        .IsUnique();

                    b.ToTable("Psicologos");
                });

            modelBuilder.Entity("SeuProjeto.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SeuProjeto.Models.Agendamento", b =>
                {
                    b.HasOne("SeuProjeto.Models.Aluno", "Aluno")
                        .WithMany("Agendamentos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeuProjeto.Models.Psicologo", "Psicologo")
                        .WithMany("Agendamentos")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("SeuProjeto.Models.Aluno", b =>
                {
                    b.HasOne("SeuProjeto.Models.Usuario", "Usuario")
                        .WithOne("Aluno")
                        .HasForeignKey("SeuProjeto.Models.Aluno", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SeuProjeto.Models.Anotacao", b =>
                {
                    b.HasOne("SeuProjeto.Models.Agendamento", "Agendamento")
                        .WithMany()
                        .HasForeignKey("AgendamentoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SeuProjeto.Models.Aluno", "Aluno")
                        .WithMany("Anotacoes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeuProjeto.Models.Psicologo", "Psicologo")
                        .WithMany("Anotacoes")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agendamento");

                    b.Navigation("Aluno");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("SeuProjeto.Models.Disponibilidade", b =>
                {
                    b.HasOne("SeuProjeto.Models.Psicologo", "Psicologo")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("SeuProjeto.Models.FormularioSolicitacao", b =>
                {
                    b.HasOne("SeuProjeto.Models.Aluno", "Aluno")
                        .WithMany("FormulariosSolicitacao")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("SeuProjeto.Models.Psicologo", b =>
                {
                    b.HasOne("SeuProjeto.Models.Usuario", "Usuario")
                        .WithOne("Psicologo")
                        .HasForeignKey("SeuProjeto.Models.Psicologo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SeuProjeto.Models.Aluno", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Anotacoes");

                    b.Navigation("FormulariosSolicitacao");
                });

            modelBuilder.Entity("SeuProjeto.Models.Psicologo", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Anotacoes");

                    b.Navigation("Disponibilidades");
                });

            modelBuilder.Entity("SeuProjeto.Models.Usuario", b =>
                {
                    b.Navigation("Aluno")
                        .IsRequired();

                    b.Navigation("Psicologo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
